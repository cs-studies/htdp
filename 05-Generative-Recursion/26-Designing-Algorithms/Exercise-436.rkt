;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname Exercise-436) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;;
;; Exercise 436.
;; Formulate a termination argument for food-create from exercise 432.


;; Note that a candidate is generated by using function random
;; for both posn-x and posn-y.
;; By definition,
;; random generates any natural number less than the given exact natural.
;; Then, let's consider two cases:
;; MAX is larger than 1
;; and MAX is equal to 1 (the smallest exact natural).
;;
;; Case 1. MAX is larger than 1.
;; In this case, a set of possible candidates is always larger than 3.
;; For example, for MAX = 2:
;; - (make-posn 0 0)
;; - (make-posn 0 1)
;; - (make-posn 1 0)
;; - (make-posn 1 1)
;; Consequently, a set of valid candidates always contain more than 2 candidates.
;; (By removing one invalid candidate from the possible candidates set).
;; Thus, for MAX larger than 1, food-create always terminates
;; generating one of the valid possible candidates
;; (given enough resources for the particular task).
;;
;; Case 2. MAX is equal to 1.
;; In this case, random always generates 0.
;; Hence, only one candidate is always generated: (make-posn 0 0).
;; If this is a valid candidate,
;; food-create successfully terminates its execution.
;; Otherwise, a new candidate is attempted to be generated infinitely.
;;
;; Therefore, food-create must eliminate one possible case of
;; not termination: food-create gets into an infinite loop
;; having MAX set to 1 and given the argument p equal to (make-posn 0 0).


(define MAX 1)

;; Posn N -> Posn
(check-satisfied (food-create (make-posn 1 1)) not=-1-1?)
(check-error (food-create (make-posn 0 0)) "Infinite loop!") ; MAX=1 only
(define (food-create p)
  (cond
    [(and (= 1 MAX) (equal? p (make-posn 0 0)))
     (error "Infinite loop!")]
    [else
     (local ((define candidate (make-posn (random MAX) (random MAX))))
       (if (equal? p candidate) (food-create p) candidate))]))


;; Posn -> Boolean
;; Use for testing only.
(define (not=-1-1? p)
  (not (and (= (posn-x p) 1) (= (posn-y p) 1))))

